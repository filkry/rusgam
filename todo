
+ implement Deref() in most/all niced3d12 classes, and in doing so replace a lot of boilerplate fns
+ implement FromIterator for SVec so I can use collect()
+ bindless
+ create an err format that that can have printf results
+ streamline shaders
    + move render::temp.rs to use shaderbindings like my main rendering pipeline
+ performance metrics overlay
+ replace the arrays in render::temp.rs with flexible vecs, and wait on fences to clear old data rather than explicitly using back buffer index
+ break render update into a beginrender() and an endrender() that consumes an intermediate struct and submits stuff, with updates in between
+ expunge all winapi references from niced3d12, only go through typey
+ check minimum D3D levels for features we use
+ consider moving SStoragePool from using Option<T> to something like maybeuninit
+ move the "buffer" for debug rendering into it's own data bucket thing, then have renderer use it
+ make my own Rc/Weak for my allocators
+ shadow rendering doesn't reflect animation
+ look for uses of SYSTEMALLOCATOR and switch as many as possible to take a passed allocator
+ make a Sync version of SDataBucket
+ move Pools out of collections mod.rs
+ Port SPool to use SMemVec backing rather than Vec
+ some stuff in model.rs should move into render
+ look for everywhere we wait on a fence and consider what it would take to actually synchronize w/o huge perf overhead
+ search for unwrap() calls and clean up
+ try out clippy and formatting code Rustically
+ handle WM_PAINT event
+ draw triangle
+ data IO
+ port math library

Things necessary to start messing around with a game:
    + level data:
        + environment definition/placement
        + define entity types in code and/or data
        + place entity type from edit mode
        + save/load levels
        + menu
    + collision detection:
        + collision resolution
    + lighting
        + define dynamic runtime lights instead of baking into shader
        + static/ambient lighting?
